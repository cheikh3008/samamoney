<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Compte extends \App\Entity\Compte implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'numCompte', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'solde', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'userCreateur', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'partenaire', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'depot', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'affectations', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'userTransaction', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'compteTransaction'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'numCompte', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'solde', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'userCreateur', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'partenaire', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'depot', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'affectations', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'userTransaction', '' . "\0" . 'App\\Entity\\Compte' . "\0" . 'compteTransaction'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Compte $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNumCompte(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumCompte', []);

        return parent::getNumCompte();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumCompte(string $numCompte): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumCompte', [$numCompte]);

        return parent::setNumCompte($numCompte);
    }

    /**
     * {@inheritDoc}
     */
    public function getSolde(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSolde', []);

        return parent::getSolde();
    }

    /**
     * {@inheritDoc}
     */
    public function setSolde(float $solde): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSolde', [$solde]);

        return parent::setSolde($solde);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeInterface $createdAt): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserCreateur(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserCreateur', []);

        return parent::getUserCreateur();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserCreateur(?\App\Entity\User $userCreateur): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserCreateur', [$userCreateur]);

        return parent::setUserCreateur($userCreateur);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartenaire(): ?\App\Entity\Partenaire
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartenaire', []);

        return parent::getPartenaire();
    }

    /**
     * {@inheritDoc}
     */
    public function setPartenaire(?\App\Entity\Partenaire $partenaire): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPartenaire', [$partenaire]);

        return parent::setPartenaire($partenaire);
    }

    /**
     * {@inheritDoc}
     */
    public function getDepot(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepot', []);

        return parent::getDepot();
    }

    /**
     * {@inheritDoc}
     */
    public function addDepot(\App\Entity\Depot $depot): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDepot', [$depot]);

        return parent::addDepot($depot);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDepot(\App\Entity\Depot $depot): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDepot', [$depot]);

        return parent::removeDepot($depot);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getAffectations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffectations', []);

        return parent::getAffectations();
    }

    /**
     * {@inheritDoc}
     */
    public function addAffectation(\App\Entity\Affectation $affectation): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAffectation', [$affectation]);

        return parent::addAffectation($affectation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAffectation(\App\Entity\Affectation $affectation): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAffectation', [$affectation]);

        return parent::removeAffectation($affectation);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserTransaction(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserTransaction', []);

        return parent::getUserTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserTransaction(\App\Entity\Transaction $userTransaction): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserTransaction', [$userTransaction]);

        return parent::addUserTransaction($userTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserTransaction(\App\Entity\Transaction $userTransaction): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserTransaction', [$userTransaction]);

        return parent::removeUserTransaction($userTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompteTransaction(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompteTransaction', []);

        return parent::getCompteTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function addCompteTransaction(\App\Entity\Transaction $compteTransaction): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCompteTransaction', [$compteTransaction]);

        return parent::addCompteTransaction($compteTransaction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCompteTransaction(\App\Entity\Transaction $compteTransaction): \App\Entity\Compte
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCompteTransaction', [$compteTransaction]);

        return parent::removeCompteTransaction($compteTransaction);
    }

}
